---
layout: post
title:  "Using ghostscript (in Python) to convert postscript to pdf."
date:   2017-06-16
categories: python
---

One of the most useful tools is learning how to use Python with basic commands you'd normally use at your terminal.  When I use [XSPEC](https://heasarc.gsfc.nasa.gov/xanadu/xspec/) for spectral modeling, it saves plots nicely in postscript.  However, in many cases they are not easily read by other programs.  You can convert them into a pdf file by using the `ghostscript` converter.  See the website [here](https://www.ghostscript.com/doc/current/Use.htm#Invoking).
At the terminal (I have a Mac), the command is:

{% highlight ruby %}
ps2pdf filename.ps
{% endhighlight %} 
 
where `filename.ps` is the postscript file and the output will be `filename.pdf`.  No resolution has been lost and it appears flawless.

{% highlight ruby %}
import os, glob

burst       = 'bn090328401'
method      = 'PYXSPEC'
det         = 'L'
detdir      = ('GBMwLAT' if 'L' in det else 'GBM')
direc       = '/Users/KimiZ/Python/Github/%s/images/%s/'%(burst, method)
os.chdir(direc) 

AllFiles = glob.glob('*.ps')

for f in AllFiles:
    os.system('ps2pdf %s'%f)
    
{% endhighlight %}    

There are other utility scripts besides ps2pdf, including pdf2ps, ps2epsi, pdf2dsc, ps2ascii, ps2ps, and ps2ps2. 


Another way to convert a postscript to a pdf (or png) is with the terminal command `convert` [provided by ImageMagick](https://www.imagemagick.org/script/index.php).  There is a number of cool things you can do to the image with this package.  You can download it through Homebrew (mac) or whatever package downloader you typically use. They also have instructions on their site. While you're there, look under `convert` to learn more about this tool.

{% highlight ruby %}
convert -density 250 -geometry 100%  filename.ps filename.pdf 

convert -density 250 -geometry 100%  filename.ps filename.png

convert -density 250 -geometry 100% filename.pdf filename.png
{% endhighlight %}  

The 250 is the resolution and geometry controls the image size.
The last two conversions to .png: will generate new images, the same number as pages there were in the ps or pdf files, and name them filename-1.png, filename-2.png, ..., filename-15.png. 

To do this in a python loop over many directories:

{% highlight ruby %}
import os

bursts = ['bn080916009', 'bn090323002', 'bn090328401',
          'bn090510016','bn090902462','bn090926181',
          'bn091003191','bn091208410','bn100728095',
          'bn110731465','bn130518580','bn131108862','bn131231198']

for burst in bursts:
    direc = '/Users/KimiZ/GRBs2/analysis/LAT/%s/PYXSPEC/GBM/grbm/'%burst
    os.chdir(direc)
    os.system('convert -density 250 -geometry 100% Plots_grbm_-01-_G_.pdf Plots_grbm_-01-_G_.png')
    
    
for burst in bursts:
    direc = '/Users/KimiZ/GRBs2/analysis/LAT/%s/PYXSPEC/GBMwLAT/grbm/'%burst
    os.chdir(direc)
    os.system('convert -density 250 -geometry 100% Plots_grbm_-01-_L_.pdf Plots_grbm_-01-_L_.png')
    
{% endhighlight %}   

